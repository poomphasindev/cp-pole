import streamlit as st
from PIL import Image, ImageOps
import numpy as np
import pandas as pd
import os
from datetime import datetime
import time
import pickle
import joblib

# --- 1. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (Lightweight Version) ---

@st.cache_resource
def load_lightweight_model():
    """
    ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏ö‡∏ö Lightweight ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ fallback method
    """
    try:
        # ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î TensorFlow Lite ‡∏´‡∏£‡∏∑‡∏≠ model ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        try:
            import tensorflow as tf
            if tf.__version__ >= "2.15.0":
                # ‡πÉ‡∏ä‡πâ TensorFlow 2.15+ ‡∏ó‡∏µ‡πà support Python 3.13
                model = tf.keras.models.load_model("model/keras_model.h5")
                st.success("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• TensorFlow ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                return model, ["P1", "P2", "P3", "P4"], "tensorflow"
        except ImportError:
            pass
        
        # Fallback: ‡πÉ‡∏ä‡πâ model ‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô pickle ‡∏´‡∏£‡∏∑‡∏≠ joblib
        try:
            if os.path.exists("model/model_lightweight.pkl"):
                with open("model/model_lightweight.pkl", 'rb') as f:
                    model = pickle.load(f)
                st.success("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• Lightweight ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                return model, ["P1", "P2", "P3", "P4"], "pickle"
        except:
            pass
            
        # Fallback: ‡πÉ‡∏ä‡πâ joblib
        try:
            if os.path.exists("model/model_lightweight.joblib"):
                model = joblib.load("model/model_lightweight.joblib")
                st.success("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• Joblib ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                return model, ["P1", "P2", "P3", "P4"], "joblib"
        except:
            pass
        
        # Final fallback: ‡πÉ‡∏ä‡πâ simple ML model
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• AI ‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ Simple ML Algorithm ‡πÅ‡∏ó‡∏ô")
        return None, ["P1", "P2", "P3", "P4"], "simple"
        
    except Exception as e:
        st.error(f"üî¥ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•: {e}")
        return None, ["P1", "P2", "P3", "P4"], "simple"

def classify_image_lightweight(image, model, class_names, model_type):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö Lightweight
    """
    # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô (224, 224)
    image = ImageOps.fit(image, (224, 224), Image.Resampling.LANCZOS)
    image_array = np.asarray(image)
    
    # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥ (Normalize)
    normalized_image_array = (image_array.astype(np.float32) / 127.5) - 1
    
    if model_type == "tensorflow" and model is not None:
        # ‡πÉ‡∏ä‡πâ TensorFlow model
        data = np.ndarray(shape=(1, 224, 224, 3), dtype=np.float32)
        data[0] = normalized_image_array
        prediction = model.predict(data, verbose=0)
        index = np.argmax(prediction)
        confidence_score = prediction[0][index]
        
    elif model_type in ["pickle", "joblib"] and model is not None:
        # ‡πÉ‡∏ä‡πâ Lightweight model
        # Flatten image for simple models
        flattened = normalized_image_array.flatten().reshape(1, -1)
        prediction = model.predict_proba(flattened)[0]
        index = np.argmax(prediction)
        confidence_score = prediction[index]
        
    else:
        # Simple ML algorithm (fallback)
        # ‡πÉ‡∏ä‡πâ feature engineering ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
        features = extract_simple_features(normalized_image_array)
        index, confidence_score = simple_classifier(features)
    
    class_name = class_names[index]
    return class_name, confidence_score

def extract_simple_features(image_array):
    """
    ‡∏™‡∏Å‡∏±‡∏î features ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û
    """
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì features ‡∏ï‡πà‡∏≤‡∏á‡πÜ
    features = {
        'mean_brightness': np.mean(image_array),
        'std_brightness': np.std(image_array),
        'mean_red': np.mean(image_array[:, :, 0]),
        'mean_green': np.mean(image_array[:, :, 1]),
        'mean_blue': np.mean(image_array[:, :, 2]),
        'contrast': np.max(image_array) - np.min(image_array),
        'entropy': calculate_entropy(image_array)
    }
    return features

def calculate_entropy(image_array):
    """
    ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì entropy ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û
    """
    hist, _ = np.histogram(image_array.flatten(), bins=256, range=[-1, 1])
    hist = hist[hist > 0]
    prob = hist / hist.sum()
    entropy = -np.sum(prob * np.log2(prob))
    return entropy

def simple_classifier(features):
    """
    Simple classifier ‡πÉ‡∏ä‡πâ features ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
    """
    # ‡πÉ‡∏ä‡πâ rules-based classification
    brightness = features['mean_brightness']
    contrast = features['contrast']
    entropy = features['entropy']
    
    # Classification rules
    if brightness < -0.5 and contrast < 0.5:
        index = 0  # P1 - ‡∏†‡∏≤‡∏û‡∏°‡∏∑‡∏î‡πÅ‡∏•‡∏∞ contrast ‡∏ï‡πà‡∏≥
    elif brightness < 0 and entropy < 4:
        index = 1  # P2 - ‡∏†‡∏≤‡∏û‡∏°‡∏∑‡∏î‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
    elif brightness > 0 and contrast > 1.0:
        index = 2  # P3 - ‡∏†‡∏≤‡∏û‡∏™‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞ contrast ‡∏™‡∏π‡∏á
    else:
        index = 3  # P4 - ‡∏†‡∏≤‡∏û‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å
    
    # Confidence based on feature strength
    confidence = min(0.95, 0.7 + abs(brightness) * 0.2 + contrast * 0.1)
    
    return index, confidence

def save_to_excel(data_list, excel_path):
    """
    ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel
    """
    df = pd.DataFrame(data_list)
    try:
        if os.path.exists(excel_path):
            existing_df = pd.read_excel(excel_path)
            updated_df = pd.concat([existing_df, df], ignore_index=True)
        else:
            updated_df = df

        updated_df.to_excel(excel_path, index=False, engine='openpyxl')
        return True, None
    except Exception as e:
        return False, str(e)

# --- 2. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (UI) ---

def apply_custom_css():
    """
    ‡πÉ‡∏ä‡πâ CSS ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô
    """
    st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Mitr:wght@300;400;500;600&display=swap');

    html, body, [class*="st-"], input, textarea, button, select {
        font-family: 'Mitr', sans-serif;
    }

    :root {
        --seven-green: #008343;
        --seven-red: #EE1C25;
        --seven-orange: #F36F21;
        --background-color: #F0F2F6;
        --text-color: #333333;
        --card-bg: #FFFFFF;
    }

    .stApp {
        background-color: var(--background-color);
    }
    
    h1, h2 {
        color: var(--seven-green);
    }

    .input-container {
        background-color: var(--card-bg);
        border-radius: 12px;
        padding: 1.5rem 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 4px 10px rgba(0,0,0,0.05);
        border: 1px solid #E0E0E0;
    }

    .stButton > button {
        background-color: var(--seven-green);
        color: white;
        font-weight: 600;
        border-radius: 8px;
        border: none;
        padding: 0.75rem 1rem;
        transition: background-color 0.3s, transform 0.2s;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        width: 100%;
    }
    .stButton > button:hover {
        background-color: #006a36;
        transform: scale(1.02);
    }

    .result-card {
        background-color: var(--card-bg);
        border-radius: 12px;
        padding: 1rem;
        text-align: center;
        margin-bottom: 1rem;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
    }
    .result-card img {
        border-radius: 8px;
        margin-bottom: 0.75rem;
        max-height: 200px;
    }
    
    .stProgress > div > div > div > div {
        background-color: var(--seven-orange);
    }
    
    [data-testid="stAlert"] { border-radius: 8px; }
    [data-testid="stSuccess"] { border-left: 5px solid var(--seven-green); }
    [data-testid="stError"] { border-left: 5px solid var(--seven-red); }

    .model-info {
        background-color: #e3f2fd;
        border: 1px solid #2196f3;
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1rem;
        color: #1976d2;
    }

    </style>
    """, unsafe_allow_html=True)

def display_header():
    """
    ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÅ‡∏•‡∏∞‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô
    """
    st.markdown(
        '<div style="text-align: center"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/40/7-eleven_logo.svg/791px-7-eleven_logo.svg.png" alt="7-Eleven Logo" width="150"></div>',
        unsafe_allow_html=True
    )
    st.markdown(
        '<h1 style="text-align: center; color: var(--seven-green);">AI for Preventive Maintenance</h1>',
        unsafe_allow_html=True
    )
    st.markdown('<p style="text-align: center;">‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå 7-ELEVEN ‡∏î‡πâ‡∏ß‡∏¢‡∏†‡∏≤‡∏û‡∏ñ‡πà‡∏≤‡∏¢</p>', unsafe_allow_html=True)
    st.markdown("---")

def display_model_info(model_type):
    """
    ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
    """
    if model_type == "tensorflow":
        st.markdown(
            '<div class="model-info">ü§ñ <strong>AI Model:</strong> TensorFlow Deep Learning Model (Real AI)</div>',
            unsafe_allow_html=True
        )
    elif model_type in ["pickle", "joblib"]:
        st.markdown(
            '<div class="model-info">‚ö° <strong>AI Model:</strong> Lightweight ML Model (Optimized)</div>',
            unsafe_allow_html=True
        )
    else:
        st.markdown(
            '<div class="model-info">‚ö†Ô∏è <strong>AI Model:</strong> Simple ML Algorithm (Fallback)</div>',
            unsafe_allow_html=True
        )

def display_results(results_list, model_type):
    """
    ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    """
    st.subheader("üéØ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•
    display_model_info(model_type)
    
    num_cols = min(len(results_list), 3)
    cols = st.columns(num_cols)
    
    for i, result in enumerate(results_list):
        with cols[i % num_cols]:
            st.markdown('<div class="result-card">', unsafe_allow_html=True)
            st.image(result['image_object'], caption=f"‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà {i+1}", use_column_width=True)
            
            st.metric(
                label="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡πâ‡∏≤‡∏¢",
                value=result['class_name'],
                delta=f"{result['confidence']:.2%}",
                delta_color="normal"
            )
            st.markdown('</div>', unsafe_allow_html=True)

# --- 3. ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô ---

def main():
    st.set_page_config(
        page_title="7-Connect PM AI (Lightweight)",
        page_icon="üîß",
        layout="wide",
        initial_sidebar_state="collapsed"
    )
    apply_custom_css()
    display_header()

    # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
    model, class_names, model_type = load_lightweight_model()
    if not class_names:
        st.stop()
    
    # --- ‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
    st.markdown('<div class="input-container">', unsafe_allow_html=True)
    st.subheader("1. ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    col1, col2 = st.columns(2)
    with col1:
        name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô:", placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ")
        code = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤:", placeholder="‡πÄ‡∏ä‡πà‡∏ô 12345")
    with col2:
        sign_type = st.text_input("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡πâ‡∏≤‡∏¢:", placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏õ‡πâ‡∏≤‡∏¢‡πÑ‡∏ü, ‡∏õ‡πâ‡∏≤‡∏¢‡πÑ‡∏ß‡∏ô‡∏¥‡∏•")

    st.subheader("2. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")
    files = st.file_uploader(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå)",
        type=['jpeg', 'jpg', 'png'],
        accept_multiple_files=True,
        label_visibility="collapsed"
    )
    st.markdown('</div>', unsafe_allow_html=True)

    # --- ‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ---
    if files:
        progress_bar = st.progress(0, text="‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...")
        st.session_state['analysis_results'] = []
        
        for i, file in enumerate(files):
            progress_text = f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà {i+1}/{len(files)}..."
            progress_bar.progress((i + 1) / len(files), text=progress_text)
            
            try:
                image = Image.open(file).convert('RGB')
                
                # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•
                class_name, confidence_score = classify_image_lightweight(image, model, class_names, model_type)
                
                st.session_state['analysis_results'].append({
                    'image_object': image,
                    'class_name': class_name,
                    'confidence': confidence_score
                })

            except Exception as e:
                st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û {file.name}: {e}")
        
        progress_bar.empty()
        
        if st.session_state['analysis_results']:
            display_results(st.session_state['analysis_results'], model_type)

            # --- ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
            st.markdown("---")
            st.subheader("3. ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            
            if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"):
                if not all([name, code, sign_type]):
                    st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô, ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤, ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡πâ‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
                else:
                    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•... ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà"):
                        image_folder_path = 'images'
                        if not os.path.exists(image_folder_path):
                            os.makedirs(image_folder_path)

                        upload_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                        data_to_save = []

                        for i, result in enumerate(st.session_state['analysis_results']):
                            image_name = f"{code}_{result['class_name']}_{upload_time.replace(':', '-')}_{i+1}.png"
                            image_path = os.path.join(image_folder_path, image_name)
                            result['image_object'].save(image_path)
                            
                            data_to_save.append({
                                'Employee name': name,
                                'Branch code': code,
                                'Sign type': sign_type,
                                'How many images': len(st.session_state['analysis_results']),
                                'Image Filename': image_name,
                                'Phase': result['class_name'],
                                'Confidence': f"{result['confidence']:.4f}",
                                'Upload Time': upload_time,
                                'Model Type': model_type
                            })
                        
                        success, error_msg = save_to_excel(data_to_save, 'data.xlsx')
                        
                        if success:
                            st.success("üéâ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
                            st.balloons()
                        else:
                            st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå: {error_msg}")

    else:
        st.info("‚¨ÜÔ∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")

if __name__ == "__main__":
    main() 